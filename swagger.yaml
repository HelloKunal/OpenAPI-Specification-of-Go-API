basePath: /
consumes:
- application/json
definitions:
  Alert:
    properties:
      activeAt:
        format: date-time
        type: string
        x-go-name: ActiveAt
      annotations:
        $ref: '#/definitions/Labels'
      labels:
        $ref: '#/definitions/Labels'
      state:
        type: string
        x-go-name: State
      value:
        type: string
        x-go-name: Value
    title: Alert has info for an alert.
    type: object
    x-go-package: Porting_GoAPI_to_OpenAPI
  AlertmanagerTarget:
    properties:
      url:
        type: string
        x-go-name: URL
    title: AlertmanagerTarget has info on one AM.
    type: object
    x-go-package: Porting_GoAPI_to_OpenAPI
  HeadStats:
    properties:
      chunkCount:
        format: int64
        type: integer
        x-go-name: ChunkCount
      maxTime:
        format: int64
        type: integer
        x-go-name: MaxTime
      minTime:
        format: int64
        type: integer
        x-go-name: MinTime
      numLabelPairs:
        format: int64
        type: integer
        x-go-name: NumLabelPairs
      numSeries:
        format: uint64
        type: integer
        x-go-name: NumSeries
    title: HeadStats has information about the TSDB head.
    type: object
    x-go-package: Porting_GoAPI_to_OpenAPI
  Label:
    properties:
      Name:
        type: string
        x-go-name: Value
    title: Label is a key/value pair of strings.
    type: object
    x-go-package: github.com/prometheus/prometheus/pkg/labels
  Labels:
    description: |-
      Labels is a sorted set of labels. Order has to be guaranteed upon
      instantiation.
    items:
      $ref: '#/definitions/Label'
    type: array
    x-go-package: github.com/prometheus/prometheus/pkg/labels
  MetricType:
    title: MetricType represents metric type values.
    type: string
    x-go-package: github.com/prometheus/prometheus/pkg/textparse
  QueryStats:
    properties:
      timings:
        $ref: '#/definitions/queryTimings'
    title: QueryStats currently only holding query timings.
    type: object
    x-go-package: github.com/prometheus/prometheus/util/stats
  RuleHealth:
    title: RuleHealth describes the health state of a rule.
    type: string
    x-go-package: github.com/prometheus/prometheus/rules
  TargetHealth:
    title: TargetHealth describes the health state of a target.
    type: string
    x-go-package: github.com/prometheus/prometheus/scrape
  Value:
    properties:
      String:
        type: string
      Type:
        $ref: '#/definitions/ValueType'
    title: Value is a generic interface for values resulting from a query evaluation.
    type: object
    x-go-package: github.com/prometheus/prometheus/promql/parser
  ValueType:
    title: ValueType describes a type of a value.
    type: string
    x-go-package: github.com/prometheus/prometheus/promql/parser
  queryTimings:
    properties:
      evalTotalTime:
        format: double
        type: number
        x-go-name: EvalTotalTime
      execQueueTime:
        format: double
        type: number
        x-go-name: ExecQueueTime
      execTotalTime:
        format: double
        type: number
        x-go-name: ExecTotalTime
      innerEvalTime:
        format: double
        type: number
        x-go-name: InnerEvalTime
      queryPreparationTime:
        format: double
        type: number
        x-go-name: QueryPreparationTime
      resultSortTime:
        format: double
        type: number
        x-go-name: ResultSortTime
    title: queryTimings with all query timers mapped to durations.
    type: object
    x-go-package: github.com/prometheus/prometheus/util/stats
  stat:
    properties:
      name:
        type: string
        x-go-name: Name
      value:
        format: uint64
        type: integer
        x-go-name: Value
    title: stat holds the information about individual cardinality.
    type: object
    x-go-package: Porting_GoAPI_to_OpenAPI
host: some-url.com
info:
  description: Documentation of our go API.
  title: goAPI.
  version: 1.0.0
paths:
  /v1/admin/tsdb/clean_tombstones:
    post:
      description: This can be used after deleting series to free up space. New in
        v2.1 and supports PUT from v2.9
      operationId: listcleanTombstonesPOST
      responses:
        "204":
          description: ""
      summary: removes the deleted data from disk and cleans up the existing tombstones.
      tags:
      - Admin
    put:
      description: This can be used after deleting series to free up space. New in
        v2.1 and supports PUT from v2.9
      operationId: listcleanTombstonesPUT
      responses:
        "204":
          description: ""
      summary: removes the deleted data from disk and cleans up the existing tombstones.
      tags:
      - Admin
  /v1/admin/tsdb/delete_series:
    post:
      description: The actual data still exists on disk and is cleaned up in future
        compactions or can be explicitly cleaned up by hitting the Clean Tombstones
        endpoint. New in v2.1 and supports PUT from v2.9
      operationId: listdeleteSeriesPOST
      responses:
        "204":
          description: ""
      summary: deletes data for a selection of series in a time range.
      tags:
      - Admin
    put:
      description: The actual data still exists on disk and is cleaned up in future
        compactions or can be explicitly cleaned up by hitting the Clean Tombstones
        endpoint. New in v2.1 and supports PUT from v2.9
      operationId: listdeleteSeriesPUT
      responses:
        "204":
          description: ""
      summary: deletes data for a selection of series in a time range.
      tags:
      - Admin
  /v1/admin/tsdb/snapshot:
    post:
      description: It will optionally skip snapshotting data that is only present
        in the head block, and which has not yet been compacted to disk. New in v2.1
        and supports PUT from v2.9
      operationId: listsnapshotPOST
      responses:
        "200":
          description: ""
      summary: creates a snapshot of all current data into snapshots/<datetime>-<rand>
        under the TSDB's data directory and returns the directory as response.
      tags:
      - Admin
    put:
      description: It will optionally skip snapshotting data that is only present
        in the head block, and which has not yet been compacted to disk. New in v2.1
        and supports PUT from v2.9
      operationId: listsnapshotPUT
      responses:
        "200":
          description: ""
      summary: creates a snapshot of all current data into snapshots/<datetime>-<rand>
        under the TSDB's data directory and returns the directory as response.
      tags:
      - Admin
  /v1/alertmanagers:
    get:
      description: Both the active and dropped Alertmanagers are part of the response.
      operationId: listalertManagers
      responses:
        "200":
          $ref: '#/responses/alertManagerDiscoveryStruct'
      summary: returns an overview of the current state of the Prometheus alertmanager
        discovery.
      tags:
      - Default
  /v1/alerts:
    get:
      description: As the /alerts endpoint is fairly new, it does not have the same
        stability guarantees as the overarching API v1.
      operationId: listAlerts
      responses:
        "200":
          $ref: '#/responses/alertStruct'
      summary: returns a list of all active alerts.
      tags:
      - Default
  /v1/label/{label_name}/values:
    get:
      description: The data section of the JSON response is a list of string label
        values..
      operationId: listlabelValues
      responses:
        "200":
          description: ""
      summary: returns a list of label values for a provided label name.
      tags:
      - Querying_metadata
  /v1/labels:
    get:
      description: The data section of the JSON response is a list of string label
        names.
      operationId: listlabelNamesGET
      responses:
        "200":
          description: ""
      summary: returns a list of label names.
      tags:
      - Querying_metadata
    post:
      description: The data section of the JSON response is a list of string label
        names.
      operationId: listlabelNamesPOST
      responses:
        "200":
          description: ""
      summary: returns a list of label names.
      tags:
      - Querying_metadata
  /v1/metadata:
    get:
      description: "However, it does not provide any target information. This is considered
        experimental and might change in the future. \nThe data section of the query
        result consists of an object where each key is a metric name and each value
        is a list of unique metadata objects, as exposed for that metric name across
        all targets."
      operationId: listmetricMetadata
      responses:
        "200":
          $ref: '#/responses/metadataStruct'
      summary: returns metadata about metrics currently scrapped from targets.
      tags:
      - Default
  /v1/query:
    get:
      description: 'The current server time is used if the time parameter is omitted.
        You can URL-encode these parameters directly in the request body by using
        the POST method and Content-Type: application/x-www-form-urlencoded header.
        This is useful when specifying a large query that may breach server-side URL
        character limits.'
      operationId: listqueryGET
      responses:
        "200":
          $ref: '#/responses/queryDataStruct'
      summary: evaluates an instant query at a single point in time.
      tags:
      - Querying
    post:
      description: 'The current server time is used if the time parameter is omitted.
        You can URL-encode these parameters directly in the request body by using
        the POST method and Content-Type: application/x-www-form-urlencoded header.
        This is useful when specifying a large query that may breach server-side URL
        character limits.'
      operationId: listqueryPOST
      responses:
        "200":
          $ref: '#/responses/queryDataStruct'
      summary: evaluates an instant query at a single point in time.
      tags:
      - Querying
  /v1/query_exemplars:
    get:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large query that may breach server-side
        URL character limits.'
      operationId: listqueryExemplarsGET
      responses:
        "200":
          description: ""
      summary: returns a list of exemplars for a valid PromQL query for a specific
        time range.
      tags:
      - Querying
    post:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large query that may breach server-side
        URL character limits.'
      operationId: listqueryExemplarsPOST
      responses:
        "200":
          description: ""
      summary: returns a list of exemplars for a valid PromQL query for a specific
        time range.
      tags:
      - Querying
  /v1/query_range:
    get:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large query that may breach server-side
        URL character limits.'
      operationId: listqueryRangeGET
      responses:
        "200":
          $ref: '#/responses/queryDataStruct'
      summary: evaluates an expression query over a range of time.
      tags:
      - Querying
    post:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large query that may breach server-side
        URL character limits.'
      operationId: listqueryRangePOST
      responses:
        "200":
          $ref: '#/responses/queryDataStruct'
      summary: evaluates an expression query over a range of time.
      tags:
      - Querying
  /v1/rules:
    get:
      description: |-
        In addition it returns the currently active alerts fired by the Prometheus instance of each alerting rule.
        As the /rules endpoint is fairly new, it does not have the same stability guarantees as the overarching API v1.
      operationId: listrules
      responses:
        "200":
          $ref: '#/responses/ruleStruct'
      summary: returns a list of alerting and recording rules that are currently loaded.
      tags:
      - Default
  /v1/series:
    delete:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large or dynamic number of series
        selectors that may breach server-side URL character limits. The data section
        of the query result consists of a list of objects that contain the label name/value
        pairs which identify each series.'
      operationId: listseriesDELETE
      responses:
        "200":
          description: ""
      summary: returns the list of time series that match a certain label set.
      tags:
      - Querying_metadata
    get:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large or dynamic number of series
        selectors that may breach server-side URL character limits. The data section
        of the query result consists of a list of objects that contain the label name/value
        pairs which identify each series.'
      operationId: listseriesGET
      responses:
        "200":
          description: ""
      summary: returns the list of time series that match a certain label set.
      tags:
      - Querying_metadata
    post:
      description: 'You can URL-encode these parameters directly in the request body
        by using the POST method and Content-Type: application/x-www-form-urlencoded
        header. This is useful when specifying a large or dynamic number of series
        selectors that may breach server-side URL character limits. The data section
        of the query result consists of a list of objects that contain the label name/value
        pairs which identify each series.'
      operationId: listseriesPOST
      responses:
        "200":
          description: ""
      summary: returns the list of time series that match a certain label set.
      tags:
      - Querying_metadata
  /v1/status/buildinfo:
    get:
      description: All values are of the result type string.
      operationId: listserveBuildInfo
      responses:
        "200":
          description: ""
      summary: returns various build information properties about the Prometheus server.
      tags:
      - Status
  /v1/status/config:
    get:
      description: The config is returned as dumped YAML file. Due to limitation of
        the YAML library, YAML comments are not included.
      operationId: listserveConfig
      responses:
        "200":
          description: ""
      summary: returns currently loaded configuration file.
      tags:
      - Status
  /v1/status/flags:
    get:
      description: All values are of the result type string.
      operationId: listserveFlags
      responses:
        "200":
          description: ""
      summary: returns flag values that Prometheus was configured with.
      tags:
      - Status
  /v1/status/runtimeinfo:
    get:
      description: The returned values are of different types, depending on the nature
        of the runtime property
      operationId: listserveRuntimeInfo
      responses:
        "200":
          description: ""
      summary: returns various runtime information properties about the Prometheus
        server.
      tags:
      - Status
  /v1/status/tsdb:
    get:
      operationId: listserveTSDBStatus
      responses:
        "200":
          $ref: '#/responses/tsdbStatusStruct'
      summary: returns various cardinality statistics about the Prometheus TSDB.
      tags:
      - Status
  /v1/status/walreplay:
    get:
      description: 'read: The number of segments replayed so far. total: The total
        number segments needed to be replayed. progress: The progress of the replay
        (0 - 100%). state: The state of the replay. Possible states: - waiting: Waiting
        for the replay to start. - in progress: The replay is in progress. - done:
        The replay has finished.'
      operationId: listserveWALReplayStatus
      responses:
        "200":
          $ref: '#/responses/walReplayStatusStruct'
      summary: returns information about the WAL replay.
      tags:
      - Status
  /v1/targets:
    get:
      description: Both the active and dropped targets are part of the response by
        default. labels represents the label set after relabelling has occurred. discoveredLabels
        represent the unmodified labels retrieved during service discovery before
        relabelling has occurred.
      operationId: listTargetMetadata
      responses:
        "200":
          $ref: '#/responses/targetStruct'
      summary: returns an overview of the current state of the Prometheus target discovery.
      tags:
      - Default
  /v1/targets/metadata:
    get:
      description: |-
        This is experimental and might change in the future.
        The data section of the query result consists of a list of objects that contain metric metadata and the target label set.
      operationId: listTargetMetadata
      responses:
        "200":
          $ref: '#/responses/targetMetadataStruct'
      summary: returns metadata about metrics currently scraped from targets.
      tags:
      - Default
produces:
- application/json
responses:
  alertManagerDiscoveryStruct:
    description: AlertmanagerDiscovery has all the active Alertmanagers.
    headers:
      activeAlertmanagers:
        items:
          $ref: '#/definitions/AlertmanagerTarget'
        type: array
      droppedAlertmanagers:
        items:
          $ref: '#/definitions/AlertmanagerTarget'
        type: array
  alertStruct:
    description: Alert has info for an alert.
    headers:
      activeAt:
        format: date-time
        type: string
      annotations: {}
      labels: {}
      state:
        type: string
      value:
        type: string
    schema:
      $ref: '#/definitions/Labels'
  metadataStruct:
    description: ""
    headers:
      help:
        type: string
      type: {}
      unit:
        type: string
    schema:
      $ref: '#/definitions/MetricType'
  queryDataStruct:
    description: ""
    headers:
      result: {}
      resultType: {}
      stats: {}
    schema:
      $ref: '#/definitions/QueryStats'
  ruleStruct:
    description: ""
    headers:
      alerts:
        items:
          $ref: '#/definitions/Alert'
        type: array
      annotations: {}
      duration:
        format: double
        type: number
      evaluationTime:
        format: double
        type: number
      health: {}
      labels: {}
      lastError:
        type: string
      lastEvaluation:
        format: date-time
        type: string
      name:
        type: string
      query:
        type: string
      state:
        description: State can be "pending", "firing", "inactive".
        type: string
      type:
        description: Type of an alertingRule is always "alerting".
        type: string
    schema:
      $ref: '#/definitions/RuleHealth'
  targetMetadataStruct:
    description: ""
    headers:
      help:
        type: string
      metric:
        type: string
      target: {}
      type: {}
      unit:
        type: string
    schema:
      $ref: '#/definitions/MetricType'
  targetStruct:
    description: Target has the information for one target.
    headers:
      discoveredLabels:
        description: Labels before any processing.
      globalUrl:
        type: string
      health: {}
      labels:
        description: Any labels that are added to this target and its metrics.
      lastError:
        type: string
      lastScrape:
        format: date-time
        type: string
      lastScrapeDuration:
        format: double
        type: number
      scrapePool:
        type: string
      scrapeUrl:
        type: string
    schema:
      $ref: '#/definitions/TargetHealth'
      additionalProperties:
        type: string
      type: object
  tsdbStatusStruct:
    description: tsdbStatus has information of cardinality statistics from postings.
    headers:
      headStats:
        description: This provides the following data about the head block of the
          TSDB.
      labelValueCountByLabelName:
        description: This will provide a list of the label names and their value count.
        items:
          $ref: '#/definitions/stat'
        type: array
      memoryInBytesByLabelName:
        description: This will provide a list of the label names and memory used in
          bytes. Memory usage is calculated by adding the length of all values for
          a given label name.
        items:
          $ref: '#/definitions/stat'
        type: array
      seriesCountByLabelValuePair:
        description: This will provide a list of label value pairs and their series
          count.
        items:
          $ref: '#/definitions/stat'
        type: array
      seriesCountByMetricName:
        description: This will provide a list of metrics names and their series count.
        items:
          $ref: '#/definitions/stat'
        type: array
    schema:
      $ref: '#/definitions/HeadStats'
  walReplayStatusStruct:
    description: ""
    headers:
      current:
        format: int64
        type: integer
      max:
        format: int64
        type: integer
      min:
        format: int64
        type: integer
schemes:
- http
securityDefinitions:
  basic:
    type: basic
swagger: "2.0"
